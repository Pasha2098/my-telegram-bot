import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
HOST, ROOM, MAP, MODE, EDIT_MAP, EDIT_MODE = range(6)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
games = {}

# –°–ø–∏—Å–∫–∏
MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥ —Ä—É–º–º–∞ ‚ùó"]

# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
COMMANDS_MENU = ReplyKeyboardMarkup([
    [
        KeyboardButton("üéÆ –°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É"),
        KeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—É–º–º—ã")
    ],
    [
        KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    ]
], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–º–º Among Us. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=COMMANDS_MENU
    )

# –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üéÆ –°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:")
        return HOST
    elif text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—É–º–º—ã":
        await list_games(update, context)
        return ConversationHandler.END
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return ConversationHandler.END

async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    host = update.message.text.strip()
    if len(host) > 25:
        await update.message.reply_text("–ò–º—è —Ö–æ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return HOST
    context.user_data["host"] = host
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A-Z):")
    return ROOM

async def get_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room_code = update.message.text.strip().upper()
    if not room_code.isalpha() or not room_code.isupper():
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í—Å–µ –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ A-Z")
        return ROOM
    context.user_data["room"] = room_code
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton(m)] for m in MAPS] + [[KeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å")]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
    return MAP

async def get_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=COMMANDS_MENU)
        return ConversationHandler.END
    if choice not in MAPS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞")
        return MAP
    context.user_data["map"] = choice
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton(m)] for m in MODES] + [[KeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å")]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=reply_markup)
    return MODE

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=COMMANDS_MENU)
        return ConversationHandler.END
    if choice not in MODES:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞")
        return MODE

    user_data = context.user_data
    room_code = user_data["room"]
    user_data["mode"] = choice

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": update.effective_user.id
    }

    asyncio.create_task(auto_delete_game(room_code))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}")
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*\n"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*\n"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*\n\n"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:\n{room_code}\n\n"
        f"‚åõ –≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.\n"
        f"\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )

    await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def auto_delete_game(room_code):
    await asyncio.sleep(5 * 60 * 60)
    games.pop(room_code, None)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.", reply_markup=COMMANDS_MENU)
        return

    msg = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
    for g in games.values():
        msg += (
            f"üë§ {g['host']} | –ö–æ–º–Ω–∞—Ç–∞: {g['room']} | –ö–∞—Ä—Ç–∞: {g['map']} | –†–µ–∂–∏–º: {g['mode']}\n"
        )
    msg += "\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚ÑπÔ∏è *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
        "\n- –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä—É–º–º—ã Among Us\n"
        "- –í—ã–≤–æ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤\n"
        "\nüìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/cancel ‚Äî –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n"
        "\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
    )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("delete:"):
        room_code = data.split(":")[1]
        if room_code in games:
            games.pop(room_code)
            await query.edit_message_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif data.startswith("edit:"):
        await query.edit_message_text("‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

if __name__ == "__main__":
    import os
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üéÆ –°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É"), get_host)],
        states={
            HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_host)],
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room)],
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^(üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä—É–º–º—ã|‚ùì –ü–æ–º–æ—â—å)$"), menu_handler))
    app.add_handler(CallbackQueryHandler(callback_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
