import asyncio
import json
from pathlib import Path
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)

HOST, ROOM, MAP, MODE = range(4)

MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥"]

games = {}
GAMES_FILE = Path("games.json")

MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("/newroom"), KeyboardButton("/list")],
        [KeyboardButton("/help"), KeyboardButton("/cancel")]
    ], resize_keyboard=True
)

MAPS_MENU = ReplyKeyboardMarkup(
    [[KeyboardButton(m)] for m in MAPS] + [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True, one_time_keyboard=True
)

MODES_MENU = ReplyKeyboardMarkup(
    [[KeyboardButton(m)] for m in MODES] + [[KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton("–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True, one_time_keyboard=True
)

def save_games():
    temp = {}
    for code, g in games.items():
        temp[code] = {k: v for k, v in g.items() if k != "task"}
    with open(GAMES_FILE, "w", encoding="utf-8") as f:
        json.dump(temp, f, ensure_ascii=False, indent=2)

async def auto_delete_game(room_code):
    try:
        await asyncio.sleep(games[room_code]["duration"])
        if room_code in games:
            del games[room_code]
            save_games()
    except asyncio.CancelledError:
        pass

def load_games():
    if GAMES_FILE.exists():
        with open(GAMES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            for code, g in data.items():
                g["task"] = asyncio.create_task(auto_delete_game(code))
                games[code] = g

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Among Us!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É–º–º–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã.\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/newroom ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    for room_code, game in games.items():
        if game["user_id"] == user_id:
            await update.message.reply_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä—É–º–º–∞ —Å –∫–æ–¥–æ–º: *{room_code}*\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é.",
                parse_mode="Markdown"
            )
            return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞ (–≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫):", reply_markup=ReplyKeyboardRemove())
    return HOST

async def input_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if len(text) > 25:
        await update.message.reply_text("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:")
        return HOST
    context.user_data["host"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞):", reply_markup=ReplyKeyboardRemove())
    return ROOM

async def input_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if len(code) != 6 or not code.isalpha() or not code.isupper():
        await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ:")
        return ROOM
    if code in games:
        await update.message.reply_text("–≠—Ç–∞ —Ä—É–º–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
        return ROOM
    context.user_data["room"] = code
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=MAPS_MENU)
    return MAP

async def input_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice not in MAPS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MAP
    context.user_data["map"] = choice
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=MODES_MENU)
    return MODE

async def input_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=MAPS_MENU)
        return MAP
    if choice not in MODES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MODE
    if len(choice) > 25:
        await update.message.reply_text("–†–µ–∂–∏–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return MODE

    user_data = context.user_data
    user_data["mode"] = choice
    room_code = user_data["room"]

    user_id = update.effective_user.id
    for code, game in list(games.items()):
        if game["user_id"] == user_id:
            task = game.get("task")
            if task:
                task.cancel()
            del games[code]
            save_games()
            break

    task = asyncio.create_task(auto_delete_game(room_code))

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": user_id,
        "duration": 4 * 60 * 60,
        "task": task
    }
    save_games()

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}"),
        ],
        [
            InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"extend:{room_code}"),
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*\n"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*\n"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*\n\n"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: *{room_code}*\n\n"
        f"‚åõ –ö–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )
    await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown")
    return ConversationHandler.END

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–º–º –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    buttons = []
    text_lines = []
    for room_code, game in games.items():
        text_line = (
            f"üë§ *{game['host']}*  |  üó∫ *{game['map']}*  |  üéÆ *{game['mode']}*  |  "
            f"üîë [{room_code}](copy_{room_code})"
        )
        text_lines.append(text_line)
        buttons.append([InlineKeyboardButton(room_code, callback_data=f"copy_room:{room_code}")])

    text = "*–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–º–º—ã:*\n\n" + "\n".join(text_lines)
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Among Us*\n\n"
        "/newroom ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–º–º—ã\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=MAIN_MENU)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("delete:"):
        room_code = data.split(":")[1]
        if room_code in games:
            task = games[room_code].get("task")
            if task:
                task.cancel()
            del games[room_code]
            save_games()
            await query.edit_message_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)

    elif data.startswith("extend:"):
        room_code = data.split(":")[1]
        if room_code in games:
            task = games[room_code].get("task")
            if task:
                task.cancel()
            games[room_code]["duration"] += 3600
            games[room_code]["task"] = asyncio.create_task(auto_delete_game(room_code))
            save_games()
            await query.edit_message_text(
                f"‚è≥ –í—Ä–µ–º—è –∫–æ–º–Ω–∞—Ç—ã *{room_code}* –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ 1 —á–∞—Å.",
                parse_mode="Markdown",
                reply_markup=None
            )

    elif data.startswith("copy_room:"):
        room_code = data.split(":")[1]
        if room_code in games:
            game = games[room_code]
            msg = (
                f"üìã *–ö–æ–ø–∏—è –∫–æ–º–Ω–∞—Ç—ã:*\n"
                f"üë§ –•–æ—Å—Ç: *{game['host']}*\n"
                f"üó∫ –ö–∞—Ä—Ç–∞: *{game['map']}*\n"
                f"üéÆ –†–µ–∂–∏–º: *{game['mode']}*\n\n"
                f"üîë –ö–æ–¥: `{room_code}`\n\n"
                f"_–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!_"
            )
            await query.message.reply_text(msg, parse_mode="Markdown")

    elif data.startswith("edit:"):
        room_code = data.split(":")[1]
        if room_code not in games:
            await query.answer("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        game = games[room_code]
        user_id = update.effective_user.id
        if game["user_id"] != user_id:
            await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂—É—é —Ä—É–º–º—É.", show_alert=True)
            return
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=MAPS_MENU)
        context.user_data["edit_room"] = room_code
        await query.answer()
        return MAP

async def edit_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "edit_room" not in context.user_data:
        await update.message.reply_text("–ù–µ—Ç —Ä—É–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    if choice not in MAPS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MAP

    context.user_data["new_map"] = choice
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=MODES_MENU)
    return MODE

async def edit_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "edit_room" not in context.user_data:
        await update.message.reply_text("–ù–µ—Ç —Ä—É–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=MAPS_MENU)
        return MAP

    if choice not in MODES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MODE

    room_code = context.user_data["edit_room"]
    if room_code not in games:
        await update.message.reply_text("–†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    games[room_code]["map"] = context.user_data["new_map"]
    games[room_code]["mode"] = choice
    save_games()

    await update.message.reply_text(
        f"–†—É–º–º–∞ {room_code} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: {games[room_code]['map']}\n"
        f"üéÆ –†–µ–∂–∏–º: {games[room_code]['mode']}",
        reply_markup=MAIN_MENU
    )

    context.user_data.pop("edit_room", None)
    context.user_data.pop("new_map", None)
    return ConversationHandler.END

def main():
    load_games()
    application = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()

    new_room_handler = ConversationHandler(
        entry_points=[CommandHandler("newroom", get_host)],
        states={
            HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_host)],
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_room)],
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    edit_room_handler = ConversationHandler(
        entry_points=[],
        states={
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END,
        }
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(new_room_handler)
    application.add_handler(edit_room_handler)
    application.add_handler(CommandHandler("list", list_games))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_callback))

    application.run_polling()

if __name__ == "__main__":
    main()
