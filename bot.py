import os
import re
import datetime
import asyncio
import sys
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

# --- States for conversation ---
(ENTER_NAME, ENTER_CODE, CHOOSE_MAP, CHOOSE_MODE, CONFIRM_ROOM) = range(5)

# --- Room storage ---
rooms = {}

# --- Constants ---
MAPS = ["Skeld", "MIRA HQ", "Polus", "Airship", "Fungle", "–í—Å–µ –∫–∞—Ä—Ç—ã"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ë–∞–≥", "–ú–æ–¥—ã"]

MAX_LEN = 25
ROOM_LIFETIME = datetime.timedelta(hours=4)  # 4 —á–∞—Å–∞

# --- Command menu keyboard ---
command_menu_kb = ReplyKeyboardMarkup([
    [KeyboardButton("/new"), KeyboardButton("/find")],
    [KeyboardButton("/delete"), KeyboardButton("/cancel")],
    [KeyboardButton("/commands")]
], resize_keyboard=True)

# --- Utility: –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ä—É–º ---
def cleanup_rooms():
    now = datetime.datetime.utcnow()
    to_delete = [user_id for user_id, r in rooms.items() if now - r['created'] > ROOM_LIFETIME]
    for user_id in to_delete:
        del rooms[user_id]

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cleanup_rooms()
    welcome_text = (
        "üëæ –ü—Ä–∏–≤–µ—Ç, –∫–æ—Å–º–æ–Ω–∞–≤—Ç!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Among Us Codes Bot! üöÄ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "üîπ –ü–æ–ª—É—á–∞—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–∞–º–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç\n"
        "üîπ –ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏\n"
        "üîπ –ò–≥—Ä–∞—Ç—å —Å –Ω–æ–≤—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –±–µ–∑ –ª–∏—à–Ω–µ–π —Å—É–µ—Ç—ã\n\n"
        "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /new —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥,\n"
        "–∏–ª–∏ /find, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É.\n\n"
        "üéÆ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è —É–∂–µ –≤ –≤–æ–∑–¥—É—Ö–µ... üòâ\n\n"
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "1. –£–¥–∞–ª—è–π—Ç–µ –∑–∞ —Å–æ–±–æ–π —Ä—É–º—ã\n"
        "2. –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–µ–π–∫–æ–≤—ã–µ —Ä—É–º—ã\n"
        "3. –°–ø–∞–º = –±–∞–Ω\n"
        "4. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã\n\n"
        "–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏ /commands"
    )
    await update.message.reply_text(welcome_text, reply_markup=command_menu_kb)

async def commands_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä—É–º—É\n"
        "/find ‚Äî –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–º—ã\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Ä—É–º—É\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )
    await update.message.reply_text(text, reply_markup=command_menu_kb)

async def new_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cleanup_rooms()
    user_id = update.effective_user.id
    if user_id in rooms:
        await update.message.reply_text(
            "üòê –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä—É–º–∞. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –µ—ë (/delete).",
            reply_markup=command_menu_kb
        )
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞ (–¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=ReplyKeyboardRemove())
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if len(name) == 0:
        await update.message.reply_text("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:")
        return ENTER_NAME
    if len(name) > MAX_LEN:
        await update.message.reply_text(f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –º–∞–∫—Å–∏–º—É–º {MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return ENTER_NAME

    context.user_data['host'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä—É–º—ã (6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ A-Z):")
    return ENTER_CODE

async def enter_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if not re.fullmatch(r"[A-Z]{6}", code):
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ A-Z. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return ENTER_CODE

    if any(r['code'] == code for r in rooms.values()):
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
        return ENTER_CODE

    context.user_data['code'] = code

    keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in MAPS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_MAP

async def choose_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if len(query.data) > MAX_LEN:
        await query.edit_message_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /new.")
        return ConversationHandler.END

    context.user_data['map'] = query.data

    keyboard = [[InlineKeyboardButton(m, callback_data=m)] for m in MODES]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_MODE

async def choose_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if len(query.data) > MAX_LEN:
        await query.edit_message_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /new.")
        return ConversationHandler.END

    context.user_data['mode'] = query.data

    keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å", callback_data="create")]]
    room_info = (
        f"üí¨ –ò–º—è: {context.user_data['host']}\n"
        f"üî§ –ö–æ–¥: *{context.user_data['code']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: {context.user_data['map']}\n"
        f"üéÆ –†–µ–∂–∏–º: {context.user_data['mode']}\n\n"
        "–°–æ–∑–¥–∞—Ç—å —Ä—É–º—É?"
    )
    await query.edit_message_text(room_info, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return CONFIRM_ROOM

async def confirm_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    now = datetime.datetime.utcnow()
    rooms[user_id] = {
        "host": context.user_data['host'],
        "code": context.user_data['code'],
        "map": context.user_data['map'],
        "mode": context.user_data['mode'],
        "created": now
    }

    context.application.create_task(auto_delete_room(user_id))

    reply_text = (
        f"‚úÖ –†—É–º–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üî§ *{context.user_data['code']}*  (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        f"üë§ {context.user_data['host']}\n"
        f"üó∫ {context.user_data['map']}\n"
        f"üéÆ {context.user_data['mode']}\n"
        f"‚è≥ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 4 —á–∞—Å–∞"
    )

    keyboard = [[
        InlineKeyboardButton(
            text=f"üìã {context.user_data['code']}",
            switch_inline_query_current_chat=context.user_data['code']
        )
    ]]

    await query.edit_message_text(reply_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return ConversationHandler.END

async def auto_delete_room(user_id):
    await asyncio.sleep(4 * 60 * 60)  # 4 —á–∞—Å–∞
    rooms.pop(user_id, None)

async def find_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cleanup_rooms()
    if not rooms:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–º. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å –ø–æ–º–æ—â—å—é /new.", reply_markup=command_menu_kb)
        return

    for idx, r in enumerate(rooms.values(), 1):
        created_ago = datetime.datetime.utcnow() - r['created']
        remaining = ROOM_LIFETIME - created_ago
        minutes_left = int(remaining.total_seconds() // 60)

        text = (
            f"üî§ *{r['code']}*  (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
            f"üë§ {r['host']}\n"
            f"üó∫ {r['map']}\n"
            f"üéÆ {r['mode']}\n"
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes_left} –º–∏–Ω"
        )

        keyboard = [[
            InlineKeyboardButton(
                text=f"üìã {r['code']}",
                switch_inline_query_current_chat=r['code']
            )
        ]]

        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in rooms:
        del rooms[user_id]
        await update.message.reply_text("üóë –í–∞—à–∞ —Ä—É–º–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=command_menu_kb)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä—É–º—ã.", reply_markup=command_menu_kb)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=command_menu_kb)
    return ConversationHandler.END

def main():
    print("Python version:", sys.version)  # –í—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏ Python

    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        exit(1)

    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('new', new_room)],
        states={
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_code)],
            CHOOSE_MAP: [CallbackQueryHandler(choose_map, pattern="^(" + "|".join(MAPS) + ")$")],
            CHOOSE_MODE: [CallbackQueryHandler(choose_mode, pattern="^(" + "|".join(MODES) + ")$")],
            CONFIRM_ROOM: [CallbackQueryHandler(confirm_room, pattern="^create$")],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('commands', commands_list))
    application.add_handler(CommandHandler('find', find_rooms))
    application.add_handler(CommandHandler('delete', delete_room))
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
