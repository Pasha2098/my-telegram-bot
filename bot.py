import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)

HOST, ROOM, MAP, MODE = range(4)

MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥"]

games = {}

COMMANDS_MENU = ReplyKeyboardMarkup(
    [["/start - —Å–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É", "/list - —Å–ø–∏—Å–æ–∫ —Ä—É–º–º"], ["/help - –ø–æ–º–æ—â—å", "/cancel - –æ—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

GREETING_TEXT = (
    "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Among Us!*\n\n"
    "üöÄ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∏—Å–∫–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã.\n\n"
    "üìú *–ü—Ä–∞–≤–∏–ª–∞:*\n"
    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A-Z –¥–ª—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã.\n"
    "2. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
    "3. –ö–æ–º–Ω–∞—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.\n\n"
    "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    "/start ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É\n"
    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
    "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\n"
    "/help ‚Äî –ø–æ–º–æ—â—å\n"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(GREETING_TEXT, parse_mode="Markdown", reply_markup=COMMANDS_MENU)
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return HOST

async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    host = update.message.text.strip()
    if len(host) > 25:
        await update.message.reply_text("–ò–º—è —Ö–æ—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return HOST
    context.user_data["host"] = host
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A-Z):")
    return ROOM

async def get_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room_code = update.message.text.strip().upper()
    if not room_code.isalpha() or not room_code.isupper():
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í—Å–µ –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ A-Z. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ROOM
    context.user_data["room"] = room_code
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
    return MAP

async def get_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice not in MAPS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MAP
    context.user_data["map"] = choice
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES] + [["–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=reply_markup)
    return MODE

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
        return MAP
    if choice not in MODES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MODE

    user_data = context.user_data
    user_data["mode"] = choice
    room_code = user_data["room"]

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": update.effective_user.id
    }

    asyncio.create_task(auto_delete_game(room_code))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}"),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä—É–º–º—É", callback_data=f"copy_room:{room_code}")
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*\n"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*\n"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*\n\n"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:\n*{room_code}*\n\n"
        f"‚åõ –≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )

    await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown")
    return ConversationHandler.END

async def auto_delete_game(room_code):
    await asyncio.sleep(5 * 60 * 60)
    games.pop(room_code, None)

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.", reply_markup=COMMANDS_MENU)
        return
    msg = "üéÆ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:*\n\n"
    for g in games.values():
        msg += f"üë§ {g['host']} | –ö–æ–º–Ω–∞—Ç–∞: {g['room']} | –ö–∞—Ä—Ç–∞: {g['map']} | –†–µ–∂–∏–º: {g['mode']}\n"
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(GREETING_TEXT, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("delete:"):
        room_code = data.split(":")[1]
        games.pop(room_code, None)
        await query.edit_message_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif data.startswith("edit:"):
        room_code = data.split(":")[1]
        context.user_data.update(games.get(room_code, {}))
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
        return MAP
    elif data.startswith("copy_room:"):
        room_code = data.split(":")[1]
        await query.message.reply_text(f"–í–æ—Ç —Ä—É–º–º–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–µ, —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!\n\n{room_code}", reply_markup=COMMANDS_MENU)

def main():
    import os
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_host)],
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room)],
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("list", list_games))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(handle_callback))

    app.run_polling()

if __name__ == '__main__':
    main()
