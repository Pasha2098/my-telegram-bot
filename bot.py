import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)
import re

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
HOST, ROOM, MAP, MODE = range(4)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
games = {}

# –°–ø–∏—Å–∫–∏
MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥ —Ä—É–º–º–∞ ‚ùó"]

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã A-Z)
ROOM_CODE_PATTERN = re.compile(r"^[A-Z]+$")

# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –≤–Ω–∏–∑—É
COMMANDS_MENU = ReplyKeyboardMarkup([
    ["–°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É", "–°–ø–∏—Å–æ–∫ —Ä—É–º–º"],
    ["–ü–æ–º–æ—â—å", "–û—Ç–º–µ–Ω–∞"]
], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞"
def back_cancel_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True, one_time_keyboard=True)

# /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üõ∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Among Us Helper Bot!\n\n"
        "üìú *–ü—Ä–∞–≤–∏–ª–∞:*\n"
        "- –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z), –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.\n\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:", reply_markup=back_cancel_keyboard())
        return HOST
    elif text == "–°–ø–∏—Å–æ–∫ —Ä—É–º–º":
        return await list_games(update, context)
    elif text == "–ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
        return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏–ª–∏ –û—Ç–º–µ–Ω–∞
async def handle_back_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE, current_step):
    text = update.message.text
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if current_step == ROOM:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:", reply_markup=back_cancel_keyboard())
            return HOST
        elif current_step == MAP:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã A-Z):", reply_markup=back_cancel_keyboard())
            return ROOM
        elif current_step == MODE:
            reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS], one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
            return MAP
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥ –∏–ª–∏ –æ—Ç–º–µ–Ω—É, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å None
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–≤–æ–¥ —Ö–æ—Å—Ç–∞
async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥/–æ—Ç–º–µ–Ω–∞
    result = await handle_back_cancel(update, context, HOST)
    if result is not None:
        return result

    host = update.message.text.strip()
    if len(host) == 0:
        await update.message.reply_text("–ò–º—è —Ö–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=back_cancel_keyboard())
        return HOST
    context.user_data["host"] = host
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã A-Z):", reply_markup=back_cancel_keyboard())
    return ROOM

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async def get_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await handle_back_cancel(update, context, ROOM)
    if result is not None:
        return result

    room = update.message.text.strip()
    if not ROOM_CODE_PATTERN.match(room):
        await update.message.reply_text(
            "‚ùó –£ –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í—Å–µ –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ A-Z –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=back_cancel_keyboard()
        )
        return ROOM
    context.user_data["room"] = room
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
    return MAP

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ —Å–ø–∏—Å–∫—É
async def get_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await handle_back_cancel(update, context, MAP)
    if result is not None:
        return result

    map_selected = update.message.text.strip()
    if map_selected not in MAPS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS], one_time_keyboard=True, resize_keyboard=True))
        return MAP
    context.user_data["map"] = map_selected
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=reply_markup)
    return MODE

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = await handle_back_cancel(update, context, MODE)
    if result is not None:
        return result

    mode_selected = update.message.text.strip()
    if mode_selected not in MODES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES], one_time_keyboard=True, resize_keyboard=True))
        return MODE
    user_data = context.user_data
    user_data["mode"] = mode_selected
    room_code = user_data["room"]

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": update.effective_user.id
    }

    asyncio.create_task(auto_delete_game(room_code))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}")
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*\n"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*\n"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*\n\n"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:\n`{room_code}`\n\n"
        f"‚åõ –≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.\n\n"
        f"–ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä—É–º–º—É ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–°–ø–∏—Å–æ–∫ —Ä—É–º–º' –≤ –º–µ–Ω—é.\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )

    await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def auto_delete_game(room_code):
    await asyncio.sleep(5 * 60 * 60)  # 5 —á–∞—Å–æ–≤
    games.pop(room_code, None)

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.", reply_markup=COMMANDS_MENU)
        return ConversationHandler.END

    msg = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
    for g in games.values():
        msg += (
            f"üë§ {g['host']} | –ö–æ–º–Ω–∞—Ç–∞: {g['room']} | –ö–∞—Ä—Ç–∞: {g['map']} | –†–µ–∂–∏–º: {g['mode']}\n"
        )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
        "–°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É ‚Äî –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∏–≥—Ä—ã.\n"
        "–°–ø–∏—Å–æ–∫ —Ä—É–º–º ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã.\n"
        "–û—Ç–º–µ–Ω–∞ ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é
