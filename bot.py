import asyncio
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, ConversationHandler, MessageHandler, filters
)

BOT_TOKEN = "BOT_TOKEN"

games = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING, HOSTNAME, MAP, MODE = range(4)

ROOM_LIFETIME = 4 * 60 * 60  # 4 —á–∞—Å–∞
EXTEND_TIME = 1 * 60 * 60    # 1 —á–∞—Å

def generate_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

async def auto_delete_game(room_code, lifetime=ROOM_LIFETIME):
    try:
        await asyncio.sleep(lifetime)
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
        return
    games.pop(room_code, None)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Among Us!*",
        parse_mode='Markdown',
    )
    await update.message.reply_text(
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create"
    )
    return CHOOSING

async def create_room_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 25 —Å–∏–º–≤–æ–ª–æ–≤):")
    return HOSTNAME

async def host_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if len(text) > 25:
        await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –º–∞–∫—Å–∏–º—É–º 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return HOSTNAME
    context.user_data['host_name'] = text
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
    keyboard = [
        [InlineKeyboardButton("Skeld", callback_data="map:Skeld")],
        [InlineKeyboardButton("Mira HQ", callback_data="map:MiraHQ")],
        [InlineKeyboardButton("Polus", callback_data="map:Polus")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MAP

async def map_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    map_name = query.data.split(":")[1]
    context.user_data['map'] = map_name
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º
    keyboard = [
        [InlineKeyboardButton("Classic", callback_data="mode:Classic")],
        [InlineKeyboardButton("Hide and Seek", callback_data="mode:HideAndSeek")],
        [InlineKeyboardButton("Proximity Chat", callback_data="mode:ProximityChat")],
    ]
    await query.edit_message_text(
        text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: {map_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MODE

async def mode_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    mode = query.data.split(":")[1]
    context.user_data['mode'] = mode

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
    while True:
        code = generate_code()
        if code not in games:
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    games[code] = {
        "host_name": context.user_data['host_name'],
        "map": context.user_data['map'],
        "mode": context.user_data['mode'],
        "user_id": update.effective_user.id,
        "expiry_task": None,
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
    task = asyncio.create_task(auto_delete_game(code, ROOM_LIFETIME))
    games[code]["expiry_task"] = task

    keyboard = [
        [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy:{code}")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å —Ä—É–º–º—É –Ω–∞ 1 —á–∞—Å", callback_data=f"extend:{code}")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä—É–º–º—É", callback_data=f"delete:{code}")],
    ]

    await query.edit_message_text(
        text=(f"–†—É–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
              f"–ö–æ–¥: {code}\n"
              f"–•–æ—Å—Ç: {games[code]['host_name']}\n"
              f"–ö–∞—Ä—Ç–∞: {games[code]['map']}\n"
              f"–†–µ–∂–∏–º: {games[code]['mode']}\n\n"
              "‚ö†Ô∏è –†—É–º–º–∞ —É–¥–∞–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞."),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("copy:"):
        code = data.split(":")[1]
        await query.message.reply_text(f"{code}")
        return

    if data.startswith("extend:"):
        code = data.split(":")[1]
        game = games.get(code)
        if not game:
            await query.message.reply_text("‚ùó –†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            return
        if query.from_user.id != game["user_id"]:
            await query.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å —Ä—É–º–º—É.")
            return
        # –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –Ω–∞ 1 —á–∞—Å
        task = game.get("expiry_task")
        if task:
            task.cancel()
        game["expiry_task"] = asyncio.create_task(auto_delete_game(code, EXTEND_TIME))
        await query.message.reply_text(f"‚úÖ –†—É–º–º–∞ {code} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 —á–∞—Å.")
        return

    if data.startswith("delete:"):
        code = data.split(":")[1]
        game = games.get(code)
        if not game:
            await query.message.reply_text("‚ùó –†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
            return
        if query.from_user.id != game["user_id"]:
            await query.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä—É–º–º—É.")
            return
        task = game.get("expiry_task")
        if task:
            task.cancel()
        games.pop(code, None)
        await query.message.reply_text(f"üóëÔ∏è –†—É–º–º–∞ {code} —É–¥–∞–ª–µ–Ω–∞.")
        return

async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä—É–º–º—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /delete <–∫–æ–¥>
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <–ö–û–î_—Ä—É–º–º—ã>")
        return
    code = context.args[0].upper()
    game = games.get(code)
    if not game:
        await update.message.reply_text("‚ùó –†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        return
    if update.effective_user.id != game["user_id"]:
        await update.message.reply_text("‚ùó –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä—É–º–º—É.")
        return
    task = game.get("expiry_task")
    if task:
        task.cancel()
    games.pop(code, None)
    await update.message.reply_text(f"üóëÔ∏è –†—É–º–º–∞ {code} —É–¥–∞–ª–µ–Ω–∞.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('create', create_room_command)],
        states={
            HOSTNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, host_name)],
            MAP: [CallbackQueryHandler(map_choice, pattern=r"^map:")],
            MODE: [CallbackQueryHandler(mode_choice, pattern=r"^mode:")],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler('start', start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler('delete', delete_command))

    app.run_polling()

if __name__ == '__main__':
    main()

