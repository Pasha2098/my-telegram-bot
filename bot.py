import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)

HOST, ROOM, MAP, MODE = range(4)

MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥"]

games = {}

COMMANDS_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("/create"), KeyboardButton("/list")],
        [KeyboardButton("/delete"), KeyboardButton("/help")],
        [KeyboardButton("/cancel")]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Among Us!*\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ —Ä—É–º–º—ã –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏.\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ò–º—è —Ö–æ—Å—Ç–∞, –∫–∞—Ä—Ç–∞ –∏ —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –¥–ª–∏–Ω–µ\n"
        "- –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã ‚Äî 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ A-Z\n"
        "- –†—É–º–º–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
    )
    await update.message.reply_text(welcome, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def create_room_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    return HOST

async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    host = update.message.text.strip()
    if len(host) > 25:
        await update.message.reply_text("–ò–º—è —Ö–æ—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return HOST
    context.user_data["host"] = host
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ A-Z):")
    return ROOM

async def get_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room_code = update.message.text.strip().upper()
    if len(room_code) != 6 or not room_code.isalpha() or not room_code.isupper():
        await update.message.reply_text("‚ùó –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ A-Z. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return ROOM
    if room_code in games:
        await update.message.reply_text("‚ùó –¢–∞–∫–∞—è —Ä—É–º–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
        return ROOM
    context.user_data["room"] = room_code
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
    return MAP

async def get_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice not in MAPS or len(choice) > 25:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MAP
    context.user_data["map"] = choice
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES] + [[KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=reply_markup)
    return MODE

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
        return MAP
    if choice not in MODES or len(choice) > 25:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return MODE

    user_data = context.user_data
    user_data["mode"] = choice
    room_code = user_data["room"]

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": update.effective_user.id,
        "expiry_task": None
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
    if games[room_code]["expiry_task"]:
        games[room_code]["expiry_task"].cancel()
    games[room_code]["expiry_task"] = asyncio.create_task(auto_delete_game(room_code))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}"),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copycode:{room_code}"),
            InlineKeyboardButton("‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"extend:{room_code}")
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*\n"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*\n"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*\n\n"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:\n*{room_code}*\n\n"
        f"‚åõ –≠—Ç–∞ –∫–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )

    await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown")
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def auto_delete_game(room_code):
    try:
        await asyncio.sleep(4 * 60 * 60)  # 4 —á–∞—Å–∞
    except asyncio.CancelledError:
        return
    games.pop(room_code, None)

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.", reply_markup=COMMANDS_MENU)
        return
    msg = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
    for g in games.values():
        msg += f"üë§ {g['host']} | –ö–æ–º–Ω–∞—Ç–∞: {g['room']} | –ö–∞—Ä—Ç–∞: {g['map']} | –†–µ–∂–∏–º: {g['mode']}\n"
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def delete_room_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç —Ä—É–º–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=COMMANDS_MENU)
        return
    buttons = [[KeyboardButton(code)] for code in games.keys()]
    buttons.append([KeyboardButton("–û—Ç–º–µ–Ω–∞")])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ —Ä—É–º–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
    return ROOM  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º ROOM –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ

async def delete_room_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room_code = update.message.text.strip().upper()
    if room_code == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=COMMANDS_MENU)
        return ConversationHandler.END
    if room_code not in games:
        await update.message.reply_text("–¢–∞–∫–æ–π —Ä—É–º–º—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel:", reply_markup=COMMANDS_MENU)
        return ROOM
    task = games[room_code].get("expiry_task")
    if task:
        task.cancel()
    games.pop(room_code)
    await update.message.reply_text(f"–†—É–º–º–∞ {room_code} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üÜò *–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/create ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä—É–º–º—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–º–º—ã\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä—É–º–º—É\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."
    )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("delete:"):
        room_code = data.split(":")[1]
        task = games.get(room_code, {}).get("expiry_task")
        if task:
            task.cancel()
        games.pop(room_code, None)
        await query.edit_message_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif data.startswith("edit:"):
        room_code = data.split(":")[1]
        if room_code not in games:
            await query.answer("–†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        context.user_data.update(games[room_code])
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS] + [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
        return MAP
    elif data.startswith("copycode:"):
        room_code = data.split(":")[1]
        await query.message.reply_text(f"{room_code}")
        await query.message.reply_text("–í–æ—Ç —Ä—É–º–º–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–µ, —Ö–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã")
    elif data.startswith("extend:"):
        room_code = data.split(":")[1]
        if room_code in games:
            task = games[room_code].get("expiry_task")
            if task:
                task.cancel()
            games[room_code]["expiry_task"] = asyncio.create_task(auto_delete_game(room_code))
            await query.message.reply_text("–†—É–º–º–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 —á–∞—Å.")
        else:
            await query.message.reply_text("–†—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def main():
    import os
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create", create_room_start)],
        states={
            HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_host)],
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room)],
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    delete_conv = ConversationHandler(
        entry_points=[CommandHandler("delete", delete_room_command)],
        states={
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_room_confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(delete_conv)
    app.add_handler(CommandHandler("list", list_games))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("cancel", cancel))

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
