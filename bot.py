import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters,
    CallbackQueryHandler
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
HOST, ROOM, MAP, MODE, EDIT_MAP, EDIT_MODE = range(6)

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
games = {}

# –°–ø–∏—Å–∫–∏
MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥"]

# –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
COMMANDS_MENU = ReplyKeyboardMarkup([
    ["/start - –°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É"],
    ["/list - –°–ø–∏—Å–æ–∫ —Ä—É–º–º"],
    ["/cancel - –û—Ç–º–µ–Ω–∏—Ç—å"],
    ["/help - –ü–æ–º–æ—â—å"]
], resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Among Us!", reply_markup=COMMANDS_MENU)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:")
    return HOST

async def get_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(update.message.text) > 25:
        await update.message.reply_text("–ò–º—è —Ö–æ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return HOST
    context.user_data["host"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A-Z):")
    return ROOM

async def get_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room = update.message.text.upper()
    if not room.isalpha() or not room.isupper():
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í—Å–µ –±—É–∫–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ A-Z.")
        return ROOM
    context.user_data["room"] = room
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)
    return MAP

async def get_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["map"] = update.message.text
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=reply_markup)
    return MODE

async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user_data["mode"] = update.message.text
    room_code = user_data["room"]

    games[room_code] = {
        "host": user_data["host"],
        "room": room_code,
        "map": user_data["map"],
        "mode": user_data["mode"],
        "user_id": update.effective_user.id
    }

    asyncio.create_task(auto_delete_game(room_code))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}")
        ]
    ])

    msg = (
        f"üõ∏ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:*
"
        f"üë§ –•–æ—Å—Ç: *{user_data['host']}*
"
        f"üó∫ –ö–∞—Ä—Ç–∞: *{user_data['map']}*
"
        f"üéÆ –†–µ–∂–∏–º: *{user_data['mode']}*
"
        f"üì• –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:
`{room_code}`
"
        f"‚åõ –ö–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤.\n\n–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ"
    )

    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=keyboard)
    return ConversationHandler.END

async def auto_delete_game(room_code):
    await asyncio.sleep(5 * 60 * 60)  # 5 —á–∞—Å–æ–≤
    games.pop(room_code, None)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=COMMANDS_MENU)
    return ConversationHandler.END

async def list_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not games:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.", reply_markup=COMMANDS_MENU)
        return

    msg = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
    for g in games.values():
        msg += (
            f"üë§ {g['host']} | –ö–æ–º–Ω–∞—Ç–∞: {g['room']} | –ö–∞—Ä—Ç–∞: {g['map']} | –†–µ–∂–∏–º: {g['mode']}\n"
        )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
"
        "/start ‚Äî –°–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É\n"
        "/list ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–º–º—ã\n"
        "/cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=COMMANDS_MENU)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("delete:"):
        code = data.split(":")[1]
        games.pop(code, None)
        await query.edit_message_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")

    elif data.startswith("edit:"):
        code = data.split(":")[1]
        game = games.get(code)
        if game and game["user_id"] == query.from_user.id:
            context.user_data.update(game)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:",
                                          reply_markup=ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MAPS], one_time_keyboard=True, resize_keyboard=True))
            return EDIT_MAP
        else:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É.")

    return ConversationHandler.END

async def edit_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["map"] = update.message.text
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton(m)] for m in MODES], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º:", reply_markup=reply_markup)
    return EDIT_MODE

async def edit_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = update.message.text
    room_code = context.user_data["room"]

    if room_code in games:
        games[room_code].update({
            "map": context.user_data["map"],
            "mode": context.user_data["mode"]
        })
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=COMMANDS_MENU)
    else:
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=COMMANDS_MENU)

    return ConversationHandler.END

if __name__ == '__main__':
    import os
    TOKEN = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            HOST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_host)],
            ROOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_room)],
            MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_map)],
            MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
            EDIT_MAP: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_map)],
            EDIT_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_mode)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_games))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("cancel", cancel))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

